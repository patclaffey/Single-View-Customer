{\rtf1\ansi\ansicpg1252\deff0\deflang6153{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22\par
\b\fs28 1.0 Overview of Web Services front end for Brandtone MongoDb\par
\b0\fs22 Access to data in the Brandtone Mongo database is by means of a web service API. The  web service API is developed in the Python programming language using Python Django.   Django is the Python MVC (Model View Controller) web framework that is analagous to  the Java Spring framework used to develop New Konnect.\par
The web services are deployed using an Apache Web Server on the server 10.177.177.60 -  this is the same development server that hosts the Mongo database. All web service  responses are in JSON format.   The three web services are as follows:\par
-  query number of SVC records for a given country.\par
-  query any msisdn for a given country\par
-  query any profile_id for a given country\par
\par
\b\fs24 1.1 Query number of records for a given country\b0\fs22\par
url:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/<Country_Code>/count/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/<Country_Code>/count/}}}\f0\fs22\par
Purpose:   query number of records (documents) for a given country\par
Example:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/za/count/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/za/count/}}}\f0\fs22\par
Example:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/id/count/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/id/count/}}}\f0\fs22\par
Parameters;  \par
\tab Country_Code  -  allowed values are za or id \par
\par
\b\fs24 1.2 Query any msisdn for a given country\b0\fs22\par
msisdn is the mongo database primary key.  This is an indexed search.\par
\par
url:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/<Country_Code>/msisdn/<Msisdn_Value>/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/<Country_Code>/msisdn/<Msisdn_Value>/}}}\f0\fs22\par
Purpose:  Query any msisdn for a given country\par
Example:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/za/msisdn/10000005523/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/za/msisdn/10000005523/}}}\f0\fs22\par
Example:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/id/msisdn/001j4xQV7o/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/id/msisdn/001j4xQV7o/}}}\f0\fs22\par
Parameters;  \par
\tab Country_Code  -  allowed values are za or id \par
\tab Msisdn_Value  -  any msisdn value for that country\par
\par
\b\fs24 1.3 Query any profile_id for a given country\b0\fs22\par
There is currently no Mongo index on profile_id. The purpose of this search is to test\par
an non-indexed Mongo search. \par
\par
url:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/<Country_Code>/profile/<Profile_Id>/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/<Country_Code>/profile/<Profile_Id>/}}}\f0\fs22\par
Purpose:  Query any msisdn for a given country\par
Example:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/za/profile/23234960/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/za/profile/23234960/}}}\f0\fs22\par
Example:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/id/profile/55340323/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/id/profile/55340323/}}}\f0\fs22\par
Parameters;  \par
\tab Country_Code  -  allowed values are za or id \par
\tab Msisdn_Value  -  any msisdn value for that country\par
\par
\b\fs24 1.4 SVC summary for a given country for customer segmentation\b0\fs22\par
The purpose of this search is to test an non-indexed Mongo search. \par
\par
url:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/<Country_Code>/summary/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/<Country_Code>/summary/}}}\f0\fs22\par
Purpose:  Get the SVC summary for a given country\par
Example:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/za/summary/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/za/summary/}}}\f0\fs22\par
Example:  {\field{\*\fldinst{HYPERLINK "http://10.177.177.60/svc/v1/id/summary/"}}{\fldrslt{\ul\cf1 http://10.177.177.60/svc/v1/id/summary/}}}\f0\fs22\par
Parameters;  \par
\tab Country_Code  -  allowed values are za or id \par
\par
\par
\b\fs28 2.0\tab Overview of ETL process for Brandtone MongoDb\b0\fs22\par
A linux CLI (Command Line Interface) has been developed using the Python programming  language to load data into Mongo from two data sources.  These two data sources are  any Oracle database or any Spreadsheet. This ETL software is hosted with the Brandtone  Mongo database on the server 10.177.177.60.  \par
\par
The Brandtone CLI (Command Line Interface) supports the following functions:\par
-  commands with prefix "test" are unit tests for the ETL software\par
-  commands with prefix "verify" check the data source and conversion to JSON without  impacting the Mongo database\par
-  commands with prefix "insert" loads data from source into mongo in insert mode\par
-  commands with prefix "update" loads data from source into mongo in update mode\par
\par
The following two sources are supported\par
-  "Oracle" - the data source is an Oracle data base\par
-  "Csv_File" - the data source is a CSV File\par
\par
Some general notes about these commands:\par
-  Mongo databases are created lazily.  That means no need to pre-create mongo  database on the mongo server\par
-  Mongo collections are created lazily.  That means no need to pre-create mongo  collection on the mongo server\par
-  For csv commands the CSV file must first be loaded into directory /bt/import\par
-  The row limit is mainly user to verify a new source.  To process all rows ensure  this number is greater than source row count.\par
\par
\par
\b\fs28 3.0    Command Line Interface for Mongo ETL with Oracle as the Data Source\b0\fs22\par
\par
\b\fs24 3.1  test_oracle_mongo\b0\fs22\par
Command:  test_oracle_mongo\par
Purpose:  Functional test suite for the Oracle to Mongo ETL softwar\par
Example:  test_oracle_mongo\par
Parameters;  None\par
\par
\b\fs24 3.2  verify_oracle_mongo\b0\fs22\par
Command:  verify_oracle_mongo <Table_Schema_Name>  <Table_Name>  <Row_Limit>\par
Purpose:  check the data source and conversion to JSON without impacting the Mongo  database\par
Example:  verify_oracle_mongo BT_DW_SVC DW_SVC_ID 10\par
Parameters;  \par
\tab Table_Schema_Name  -  Oracle schema that owns table\par
\tab Table_Name\par
\tab Row_Limit  -  limits number of rows processed\par
\par
\b\fs24 3.3  insert_oracle_mongo\b0\fs22\par
Command:  insert_oracle_mongo <Table_Schema_Name>  <Table_Name>  <Row_Limit>  <Mongo_Database> <Mongo_Collection>\par
Purpose:  insert all data from an Oracle table into a Mongo collection\par
Example:  insert_oracle_mongo BT_DW_SVC DW_SVC_ID 1000000000 my_mongo_db my_collection\par
Parameters;  \par
\tab Table_Schema_Name  -  Oracle schema that owns table\par
\tab Table_Name\par
\tab Row_Limit  -  limits number of rows processed, set to a very high value to  ensure all data is loaded\par
\tab Mongo_Database - Name of Mongo Database.  No need to pre-define database name  on Mongo\par
\tab Mongo_Collection - Name of Mongo Collection.  No need to pre-define collection  name on Mongo\par
\par
\b\fs24 3.4  update_oracle_mongo\b0\fs22\par
Command:  update_oracle_mongo <Table_Schema_Name>  <Table_Name>  <Row_Limit>  <Mongo_Database> <Mongo_Collection>\par
Purpose:  update all data from a CSV File into a Mongo collection\par
Example:  update_oracle_mongo BT_DW_SVC DW_SVC_ID 10000000 my_mongo_db my_collection\par
Parameters;  \par
\tab Table_Schema_Name  -  Oracle schema that owns table\par
\tab Table_Name\par
\tab Row_Limit  -  limits number of rows processed, set to a very high value to  ensure all data is loaded\par
\tab Mongo_Database - Name of Mongo Database.  No need to pre-define database name  on Mongo\par
\tab Mongo_Collection - Name of Mongo Collection.  No need to pre-define collection  name on Mongo\par
\par
\b\fs28 4.0    Command Line Interface for Mongo ETL using a CSV File\par
\b0\fs22\par
\b\fs24 4.1  test_csv_mongo\b0\fs22\par
Command:  test_csv_mongo\par
Purpose:  Functional test suite for the CSV File to Mongo ETL software\par
Example:  test_csv_mongo\par
Parameters;  None\par
\par
\b\fs24 4.2  verify_csv_mongo\b0\fs22\par
Command:  verify_csv_mongo <Csv_File_Name>  <Row_Limit>\par
Purpose:  check the data source and conversion to JSON without impacting the Mongo  database\par
Example:  verify_csv_mongo \ldblquote Indonesia_1.csv\rdblquote  10\par
Parameters;  \par
\tab Csv_File_Name  -  file name which must exist in folder /bt/import\par
\tab Row_Limit  -  limits number of rows processed\par
\par
\b\fs24 4.3  insert_csv_mongo\b0\fs22\par
Command:  insert_csv_mongo <Csv_File_Name>  <Row_Limit> <Mongo_Database>  <Mongo_Collection>\par
Purpose:  insert all data from a CSV File into a Mongo collection\par
Example:  insert_csv_mongo \ldblquote Indonesia_1.csv\rdblquote  10000000 my_mongo_db my_collection\par
Parameters;  \par
\tab Csv_File_Name  -  file name which must exist in folder /bt/import\par
\tab Row_Limit  -  limits number of rows processed, set to a very high value to  ensure all data is loaded\par
\tab Mongo_Database - Name of Mongo Database.  No need to pre-define database name  on Mongo\par
\tab Mongo_Collection - Name of Mongo Collection.  No need to pre-define collection  name on Mongo\par
\par
\b\fs24 4.4  update_csv_mongo\b0\fs22\par
Command:  update_csv_mongo <Csv_File_Name>  <Row_Limit> <Mongo_Database>  <Mongo_Collection>\par
Purpose:  update all data from a CSV File into a Mongo collection\par
Example:  update_csv_mongo \ldblquote Indonesia_1.csv\rdblquote  10000000 my_mongo_db my_collection\par
Parameters;  \par
\tab Csv_File_Name  -  file name which must exist in folder /bt/import\par
\tab Row_Limit  -  limits number of rows processed, set to a very high value to  ensure all data is loaded\par
\tab Mongo_Database - Name of Mongo Database.  No need to pre-define database name  on Mongo\par
\tab Mongo_Collection - Name of Mongo Collection.  No need to pre-define collection  name on Mongo\par
\par
\par
\b\fs28 5.0  SVC Country Summary\b0\fs22\par
The linux command line interface is used to refresh the json document that contains the SVC summary for consumption by the SVC Web Application\par
\b\fs24 summarize_country_collection\b0\fs22\par
Command:   \fs24 summarize_country_collection \fs22 <Country Code> \par
Purpose:  \par
Example:   \fs24 summarize_country_collection ZA\par
\fs22 Example:   \fs24 summarize_country_collection ID\fs22\par
Parameters;  \par
\tab Country_Code  - valid values are ZA and ID (uppercase)\par
\par
\par
\b\fs28 6.0  Bill of Software\b0\fs22\par
\par
\b\fs24 6.1 Git Directory Structure\b0\fs22\par
Git (BitBucket) is Brandtone's source control system.  All project code is in git - repository name is SVC (Single View of the Customer).\par
The code is structured as follows\par
-  the README file is in the top level folder.  There are two versions - the .rtf is the formated printer friendly copy.  The .txt is included because is displays automatically in bitbucket.\par
- /scripts folder contains all the Python etl scripts\par
- /bin bucket contains the Linux executables for the Linux ETL Command Line Interface\par
- /import contains a text csv file\par
- /mysite contains all the Python Django WEb Services code\par
\par
\b\fs24 6.2 Linux Directory Structure\b0\fs22\par
Linux directory structure is as follows:\par
/usr/lib/svc  -  the Python ETL code and Python Django code (for web services) is copied to this directory\par
/usr/bin  -  the Linux ececutables from  git /bin directory are copied here\par
/bt/import - CSV files must be installed in this directory \par
\par
Linux directories are defined as per the following Linux standard:\par
{\field{\*\fldinst{HYPERLINK "http://www.tldp.org/HOWTO/HighQuality-Apps-HOWTO/fhs.html"}}{\fldrslt{\ul\cf1 http://www.tldp.org/HOWTO/HighQuality-Apps-HOWTO/fhs.html}}}\f0\fs22\par
\b\fs28\par
\par
7.0\tab Installation Notes\b0\fs22\par
Installation notes will be added here e.g. notes on setup of Apache web server and mod_wsgi module for interfacing Apache and Python Django\par
Enivornment variables are needed to support the cx_Oracle Python Module and also to support the Apache mod_wsgi module.  These are setup in file /etc/profile.d/oracle_env.sh\par
The Apache web server is installed in directory /www/http.  The command to restart Appache is \par
"apachectl -k restart" - this executable is in directory /www/http/bin.    A automatic process needs to be setup to startup Apache after a reboot.  At present Apache needs to be manuallt started after reboot.\par
Issue with Mongo logs filing up (and degrading performance) was fixed by db.setProfilingOption(  \{ "slowms": 2000 \} ).  This command changes threshold to log slow commands from default value of 200ms to 2 seconds.\par
\par
\par
\par
\par
 \par
}
 